const form = document.getElementById("captureForm"), link = document.getElementById("videoLink"), times = document.getElementById("times"), submitButton = document.getElementById("submitButton"), sendUrl = "/screen_grab_tool/capture_and_download", toggleLoader = e => { let t = document.getElementById("loader"); if (e) { if (!t) { let a = document.createElement("div"), d = document.createElement("div"); d.className = "indeterminate", a.className = "progress", a.id = "loader", document.body.appendChild(a).appendChild(d).classList.add("indigo") } submitButton.disabled = !0 } else t && document.body.removeChild(t), submitButton.disabled = !1 }, postData = async (e, t) => { let a = t.split(",").map(e => e.trim()).filter(Boolean); if (!(e.endsWith(".mp4") || e.endsWith(".m3u8"))) { M.toast({ html: "Invalid video link. The link must end with .mp4 or .m3u8" }); return } toggleLoader(!0); try { let d = await fetch("http://127.0.0.1:5173/screen_grab_tool/capture_and_download", { method: "POST", cache: "no-cache", headers: { "Content-Type": "application/json" }, referrerPolicy: "no-referrer", body: JSON.stringify({ videoLink: e, times: a }) }); d.ok || (console.error("Failed to send video to server:", d), M.toast({ html: "Failed to send video to server" })); let o = await d.blob(), i = URL.createObjectURL(o), l = document.createElement("a"); l.href = i, l.download = "screenshots.zip", document.body.appendChild(l), l.click(), document.body.removeChild(l), URL.revokeObjectURL(i) } catch (r) { M.toast({ html: "Request Failed!" }), console.error("Failed sending data to backend:", r) } finally { toggleLoader(!1) } }; form.addEventListener("submit", e => { e.preventDefault(), postData(link.value, times.value) });
